const soap = require("soap")
const fs = require("fs")
const path = require("path")
const readline = require("readline")

const SOAP_URL = "http://localhost:8001?wsdl"

class MensageiroSOAPClient {
  constructor() {
    this.client = null
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
    })
  }

  async connect() {
    try {
      console.log("üîó Conectando ao servi√ßo SOAP...")
      this.client = await soap.createClientAsync(SOAP_URL)
      console.log("‚úÖ Conectado com sucesso!")
      console.log("üìã Servi√ßos dispon√≠veis:", Object.keys(this.client.describe()))
      return true
    } catch (error) {
      console.error("‚ùå Erro ao conectar:", error.message)
      return false
    }
  }

  async uploadFile(username, roomName, filePath, description = "") {
    try {
      if (!fs.existsSync(filePath)) {
        throw new Error("Arquivo n√£o encontrado")
      }

      const fileData = fs.readFileSync(filePath)
      const filename = path.basename(filePath)

      console.log(`üì§ Enviando arquivo: ${filename}`)
      console.log(`üë§ Usu√°rio: ${username}`)
      console.log(`üè† Sala: ${roomName}`)
      console.log(`üìù Descri√ß√£o: ${description || "Sem descri√ß√£o"}`)
      console.log(`üìä Tamanho: ${fileData.length} bytes`)

      const result = await this.client.upload_fileAsync({
        username: username,
        room_name: roomName,
        filename: filename,
        file_data: fileData,
        description: description,
      })

      if (result[0].success) {
        console.log("‚úÖ Upload realizado com sucesso!")
        console.log("üìÑ Informa√ß√µes do arquivo:")
        console.log(`   ID: ${result[0].file_info.file_id}`)
        console.log(`   Nome: ${result[0].file_info.filename}`)
        console.log(`   Tamanho: ${result[0].file_info.file_size} bytes`)
        console.log(`   Data: ${result[0].file_info.upload_date}`)
        console.log(`   Usu√°rio: ${result[0].file_info.uploader_username}`)
        console.log(`   Sala: ${result[0].file_info.room_name}`)
        return result[0].file_info
      } else {
        console.error("‚ùå Erro no upload:", result[0].message)
        return null
      }
    } catch (error) {
      console.error("‚ùå Erro ao enviar arquivo:", error.message)
      return null
    }
  }

  async downloadFile(fileId, outputPath) {
    try {
      console.log(`üì• Baixando arquivo com ID: ${fileId}`)

      const result = await this.client.download_fileAsync({
        file_id: fileId,
      })

      if (result[0]) {
        fs.writeFileSync(outputPath, result[0])
        console.log(`‚úÖ Arquivo baixado com sucesso: ${outputPath}`)
        console.log(`üìä Tamanho: ${result[0].length} bytes`)
        return true
      } else {
        console.error("‚ùå Arquivo n√£o encontrado")
        return false
      }
    } catch (error) {
      console.error("‚ùå Erro ao baixar arquivo:", error.message)
      return false
    }
  }

  async listFiles(roomName) {
    try {
      console.log(`üìã Listando arquivos da sala: ${roomName}`)

      const result = await this.client.list_filesAsync({
        room_name: roomName,
      })

      if (result[0] && result[0].length > 0) {
        console.log(`‚úÖ Encontrados ${result[0].length} arquivo(s):`)
        result[0].forEach((file, index) => {
          console.log(`\nüìÑ Arquivo ${index + 1}:`)
          console.log(`   ID: ${file.file_id}`)
          console.log(`   Nome: ${file.filename}`)
          console.log(`   Tamanho: ${file.file_size} bytes`)
          console.log(`   Data: ${file.upload_date}`)
          console.log(`   Sala: ${file.room_name}`)
        })
        return result[0]
      } else {
        console.log("üì≠ Nenhum arquivo encontrado nesta sala")
        return []
      }
    } catch (error) {
      console.error("‚ùå Erro ao listar arquivos:", error.message)
      return []
    }
  }

  async showMenu() {
    console.log("\nüéØ === MENSAGEIRO SOAP CLIENT ===")
    console.log("1. üì§ Upload de arquivo")
    console.log("2. üì• Download de arquivo")
    console.log("3. üìã Listar arquivos de uma sala")
    console.log("4. üîç Mostrar WSDL")
    console.log("5. ‚ùå Sair")
    console.log("================================")
  }

  question(prompt) {
    return new Promise((resolve) => {
      this.rl.question(prompt, resolve)
    })
  }

  async showWSDL() {
    try {
      console.log("\nüìã === INFORMA√á√ïES DO WSDL ===")
      console.log(`üîó URL: ${SOAP_URL}`)

      const description = this.client.describe()
      console.log("\nüè∑Ô∏è  Principais Tags do WSDL:")
      console.log("   ‚Ä¢ <definitions>: Define o namespace e importa√ß√µes")
      console.log("   ‚Ä¢ <types>: Define os tipos de dados complexos")
      console.log("   ‚Ä¢ <message>: Define as mensagens de entrada e sa√≠da")
      console.log("   ‚Ä¢ <portType>: Define as opera√ß√µes dispon√≠veis")
      console.log("   ‚Ä¢ <binding>: Define como as mensagens s√£o transmitidas")
      console.log("   ‚Ä¢ <service>: Define os endpoints do servi√ßo")

      console.log("\nüîß Opera√ß√µes dispon√≠veis:")
      Object.keys(description).forEach((serviceName) => {
        Object.keys(description[serviceName]).forEach((portName) => {
          Object.keys(description[serviceName][portName]).forEach((operation) => {
            console.log(`   ‚Ä¢ ${operation}: ${this.getOperationDescription(operation)}`)
          })
        })
      })

      console.log("\nüìä Estrutura do Cliente SOAP:")
      console.log("   ‚Ä¢ Linguagem: Node.js")
      console.log("   ‚Ä¢ Biblioteca: soap (npm)")
      console.log("   ‚Ä¢ Protocolo: SOAP 1.1")
      console.log("   ‚Ä¢ Transporte: HTTP")
      console.log("   ‚Ä¢ Formato: XML")

      console.log("\nüîÑ Como o cliente utiliza o WSDL:")
      console.log("   1. Faz requisi√ß√£o GET para obter o WSDL")
      console.log("   2. Parseia o XML para extrair opera√ß√µes e tipos")
      console.log("   3. Cria m√©todos JavaScript para cada opera√ß√£o")
      console.log("   4. Serializa par√¢metros para XML SOAP")
      console.log("   5. Envia requisi√ß√£o POST com envelope SOAP")
      console.log("   6. Deserializa resposta XML para objeto JavaScript")
    } catch (error) {
      console.error("‚ùå Erro ao mostrar WSDL:", error.message)
    }
  }

  getOperationDescription(operation) {
    const descriptions = {
      upload_file: "Faz upload de arquivo para uma sala",
      download_file: "Baixa arquivo pelo ID",
      list_files: "Lista arquivos de uma sala",
    }
    return descriptions[operation] || "Opera√ß√£o SOAP"
  }

  async run() {
    console.log("üöÄ Iniciando cliente SOAP do Mensageiro...")

    const connected = await this.connect()
    if (!connected) {
      console.log("‚ùå N√£o foi poss√≠vel conectar ao servi√ßo SOAP")
      this.rl.close()
      return
    }

    while (true) {
      await this.showMenu()
      const choice = await this.question("Escolha uma op√ß√£o: ")

      switch (choice) {
        case "1":
          const username = await this.question("üë§ Nome do usu√°rio: ")
          const roomName = await this.question("üè† Nome da sala: ")
          const filePath = await this.question("üìÅ Caminho do arquivo: ")
          const description = await this.question("üìù Descri√ß√£o (opcional): ")
          await this.uploadFile(username, roomName, filePath, description)
          break

        case "2":
          const fileId = await this.question("üÜî ID do arquivo: ")
          const outputPath = await this.question("üíæ Caminho para salvar: ")
          await this.downloadFile(fileId, outputPath)
          break

        case "3":
          const listRoomName = await this.question("üè† Nome da sala: ")
          await this.listFiles(listRoomName)
          break

        case "4":
          await this.showWSDL()
          break

        case "5":
          console.log("üëã Encerrando cliente SOAP...")
          this.rl.close()
          return

        default:
          console.log("‚ùå Op√ß√£o inv√°lida!")
      }

      await this.question("\n‚è∏Ô∏è  Pressione Enter para continuar...")
    }
  }
}

// Executar cliente se chamado diretamente
if (require.main === module) {
  const client = new MensageiroSOAPClient()
  client.run().catch(console.error)
}

module.exports = MensageiroSOAPClient
